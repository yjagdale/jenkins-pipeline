package com.automation

public class Utilites {

    def getChangeString() {
        MAX_MSG_LEN = 100
        def changeString = ""
        echo "Gathering SCM changes"
        def changeLogSets = currentBuild.changeSets
        for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int j = 0; j < entries.length; j++) {
                def entry = entries[j]
                truncated_msg = entry.msg.take(MAX_MSG_LEN)
                changeString += " - ${truncated_msg} [${entry.author}]\n"
            }
        }
        if (!changeString) {
            changeString = " - No new changes"
        }
        return changeString
    }
    def sendEmail(status) {
        /*  mail(
                  to: "$EMAIL_RECIPIENTS",
                  subject: "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})",
                  body: "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" + "\n")*/
        print status
    }
    def getDevVersion() {
        def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
        def versionNumber
        if (gitCommit == null) {
            versionNumber = env.BUILD_NUMBER
        } else {
            versionNumber = gitCommit.take(8)
        }
        print 'build  versions...'
        print versionNumber
        return versionNumber
    }
    def getReleaseVersion() {
        def pom = readMavenPom file: 'pom.xml'
        def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
        def versionNumber
        if (gitCommit == null) {
            versionNumber = env.BUILD_NUMBER
        } else {
            versionNumber = gitCommit.take(8)
        }
        return pom.version.replace("-SNAPSHOT", ".${versionNumber}")
    }

}